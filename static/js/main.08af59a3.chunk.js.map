{"version":3,"sources":["components/sidebar/Sidebar.jsx","store/actionTypes.js","store/actions/index.js","database.js","components/editor/EditorTask.jsx","components/layout/Layout.jsx","containers/TaskBoard.jsx","App.js","serviceWorker.js","store/reducers/todoReducers.js","store/reducers/index.js","store/store.js","index.js"],"names":["Sidebar","path","this","props","location","pathname","react_default","a","createElement","className","Link","concat","to","Component","withRouter","CREATE_TASK","SET_TASKS","GET_TASK","UPDATE_TASK","createTask","todo","type","payload","setTasks","tasks","getTask","id","updateTask","task","db","localStorage","EditorTask","state","name","updateTaskInDbAndStore","_this","getTasks","getItem","JSON","parse","taskIndex","findIndex","t","findedTask","newTask","Object","objectSpread","filteredTasks","filter","splice","newTasks","toConsumableArray","serializeNewTasks","stringify","setItem","setState","_this2","_this$state","notes","value","onChange","e","target","onKeyPress","key","placeholder","onClick","src","alt","connect","dispatch","bindActionCreators","Layout","_ref","children","openTask","react","sidebar_Sidebar","editor_EditorTask","TaskBoardHeader","title","Task","important","makeImportant","event","find","serializeTasks","stopPropagation","_this$props$task","TaskBoard","toggleTask","_this3","createNewTask","cuid","completed","oldTasks","_this4","_this$props","showCreateButton","length","Layout_Layout","TaskBoard_TaskBoardHeader","map","TaskBoard_Task","_ref2","App","BrowserRouter","Switch","Route","exact","render","containers_TaskBoard","assign","Boolean","window","hostname","match","initialState","rootReducer","arguments","undefined","action","newState","taskId","store","createStore","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.08af59a3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nclass Sidebar extends Component {\r\n  render() {\r\n    const path = this.props.location.pathname;\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <nav className=\"sidebar-nav\">\r\n          <Link\r\n            className={`sidebar-nav__link ${path === \"/\" ? \"active\" : \"\"}`}\r\n            to=\"/\"\r\n          >\r\n            My day\r\n          </Link>\r\n          <Link\r\n            className={`sidebar-nav__link ${\r\n              path === \"/important\" ? \"active\" : \"\"\r\n            }`}\r\n            to=\"/important\"\r\n          >\r\n            Important\r\n          </Link>\r\n          <Link\r\n            className={`sidebar-nav__link ${\r\n              path === \"/planned\" ? \"active\" : \"\"\r\n            }`}\r\n            to=\"/planned\"\r\n          >\r\n            Planned\r\n          </Link>\r\n          <Link\r\n            className={`sidebar-nav__link ${path === \"/tasks\" ? \"active\" : \"\"}`}\r\n            to=\"/tasks\"\r\n          >\r\n            Tasks\r\n          </Link>\r\n        </nav>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","export const CREATE_TASK = \"CREATE_TASK\";\r\nexport const SET_TASKS = \"SET_TASKS\";\r\nexport const GET_TASK = \"GET_TASK\";\r\nexport const UPDATE_TASK = \"UPDATE_TASK\";","import { CREATE_TASK, SET_TASKS, GET_TASK, UPDATE_TASK } from \"../actionTypes\";\r\n\r\nconst createTask = todo => ({\r\n  type: CREATE_TASK,\r\n  payload: todo\r\n});\r\n\r\nconst setTasks = tasks => ({\r\n  type: SET_TASKS,\r\n  payload: tasks\r\n});\r\n\r\nconst getTask = id => ({\r\n  type: GET_TASK,\r\n  payload: id\r\n});\r\n\r\nconst updateTask = task => ({\r\n  type: UPDATE_TASK,\r\n  payload: task\r\n});\r\n\r\nexport { createTask, setTasks, getTask , updateTask };\r\n","const db = localStorage;\r\nexport { db };\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { updateTask } from \"../../store/actions\";\r\nimport { db } from \"../../database\";\r\n\r\nclass EditorTask extends Component {\r\n  state = {\r\n    id: \"\",\r\n    name: \"\"\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState(this.props.task);\r\n  }\r\n\r\n  updateTaskInDbAndStore = task => {\r\n    this.props.updateTask(task);\r\n    let getTasks = db.getItem(\"tasks\");\r\n    let serializeTasks = JSON.parse(getTasks);\r\n    let tasks = serializeTasks.tasks;\r\n    let taskIndex = tasks.findIndex(t => t.id === task.id);\r\n    let findedTask = tasks[taskIndex];\r\n\r\n    let newTask = {\r\n      ...findedTask,\r\n      ...this.state\r\n    };\r\n    let filter = arr => arr.filter(t => t.id !== task.id);\r\n    let filteredTasks = filter(tasks);\r\n    filteredTasks.splice(taskIndex, 0, newTask);\r\n\r\n    let newTasks = { tasks: [...filteredTasks] };\r\n    let serializeNewTasks = JSON.stringify(newTasks);\r\n    db.setItem(\"tasks\", serializeNewTasks);\r\n  };\r\n\r\n  render() {\r\n    const { name, notes } = this.state;\r\n    let task = this.state;\r\n    return (\r\n      <div className=\"task-edit\">\r\n        <input\r\n          className=\"task-edit__name\"\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={e => this.setState({ name: e.target.value })}\r\n          onKeyPress={e =>\r\n            e.key === \"Enter\" && this.updateTaskInDbAndStore(task)\r\n          }\r\n        />\r\n        <textarea\r\n          className=\"task-edit__notes\"\r\n          type=\"text\"\r\n          value={notes}\r\n          placeholder=\"Notes\"\r\n          onChange={e => this.setState({ notes: e.target.value })}\r\n          onKeyPress={e =>\r\n            e.key === \"Enter\" && this.updateTaskInDbAndStore(task)\r\n          }\r\n        />\r\n        <button\r\n          className=\"task-edit__save\"\r\n          onClick={() => this.updateTaskInDbAndStore(task)}\r\n        >\r\n          Save\r\n        </button>\r\n        <div className=\"task-edit__bottom-panel\">\r\n          <button onClick={this.props.onClick} className=\"task-edit__hide\">\r\n            <img src=\"assets/img/right-arrow.svg\" alt=\"\" />\r\n          </button>\r\n          <button className=\"task-edit__delete\">\r\n            <img src=\"assets/img/delete-button.svg\" alt=\"\" />\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  task: state.task\r\n});\r\n\r\nconst mapDispatchToState = dispatch => ({\r\n  updateTask: bindActionCreators(updateTask, dispatch)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToState\r\n)(EditorTask);\r\n","import React, { Fragment } from \"react\";\r\nimport Sidebar from \"../sidebar/Sidebar\";\r\nimport EditorTask from \"../editor/EditorTask\";\r\n\r\nexport const Layout = ({ children, openTask, onClick }) => (\r\n  <Fragment>\r\n    <Sidebar />\r\n    {children}\r\n    {openTask && <EditorTask onClick={onClick} />}\r\n  </Fragment>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport { Layout } from \"../components/layout/Layout\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { createTask, setTasks, getTask } from \"../store/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { db } from \"../database\";\r\nimport cuid from \"cuid\";\r\n\r\nconst TaskBoardHeader = ({ title }) => (\r\n  <div className=\"taskboard-header\">\r\n    <span className=\"taskboard-header__title\">{title}</span>\r\n  </div>\r\n);\r\n\r\nclass Task extends Component {\r\n  state = {\r\n    important: false\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.setState({ important: this.props.task.important });\r\n  }\r\n\r\n  makeImportant = (id, event) => {\r\n    this.setState({ important: !this.state.important });\r\n    let important = !this.state.important;\r\n    let tasks = this.props.tasks;\r\n    let task = tasks.find(t => {\r\n      return t.id === id;\r\n    });\r\n    task.important = important;\r\n    let serializeTasks = JSON.stringify({ tasks: tasks });\r\n    db.setItem(\"tasks\", serializeTasks);\r\n    event.stopPropagation();\r\n  };\r\n\r\n  render() {\r\n    const { name, id } = this.props.task;\r\n    const { important } = this.state;\r\n    return (\r\n      <div onClick={() => this.props.onClick(id)} key={id} className=\"task\">\r\n        <span className=\"task__circle\" />\r\n        <span className=\"task__name\">{name}</span>\r\n        <span\r\n          onClick={event => this.makeImportant(id, event)}\r\n          className=\"task__star\"\r\n        >\r\n          {important ? (\r\n            <img src=\"assets/img/star-full.svg\" alt=\"star\" />\r\n          ) : (\r\n            <img src=\"assets/img/star.svg\" alt=\"star\" />\r\n          )}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass TaskBoard extends Component {\r\n  state = {\r\n    name: \"\",\r\n    openTask: false\r\n  };\r\n  componentDidMount() {\r\n    let tasks = db.getItem(\"tasks\");\r\n    if (tasks) {\r\n      let serializeTasks = JSON.parse(tasks);\r\n      this.props.setTasks(serializeTasks.tasks);\r\n    }\r\n  }\r\n\r\n  toggleTask = id => {\r\n    this.setState({ openTask: !this.state.openTask });\r\n    this.props.getTask(id);\r\n  };\r\n\r\n  createNewTask = () => {\r\n    let task = {\r\n      id: cuid(),\r\n      name: this.state.name,\r\n      notes: \"\",\r\n      completed: false,\r\n      filter: this.props.filter,\r\n      important: false\r\n    };\r\n    let oldTasks = this.props.tasks;\r\n    let newTasks = {\r\n      tasks: [...oldTasks, task]\r\n    };\r\n    let serializeNewTasks = JSON.stringify(newTasks);\r\n    db.setItem(\"tasks\", serializeNewTasks);\r\n    this.props.createTask(task);\r\n    this.setState({ name: \"\" });\r\n  };\r\n  render() {\r\n    const { title, tasks } = this.props;\r\n    const { name, openTask } = this.state;\r\n    const showCreateButton = name.length > 0;\r\n    let filterTasksByFilter = arr =>\r\n      arr.filter(task => {\r\n        if (this.props.filter.length === 0) {\r\n          return task;\r\n        }\r\n        return task.filter === this.props.filter;\r\n      });\r\n    let filteredTasks = filterTasksByFilter(tasks);\r\n    return (\r\n      <Layout openTask={openTask} onClick={this.toggleTask}>\r\n        <div className={`taskboard ${openTask ? \"collapsed\" : \"\"}`}>\r\n          <TaskBoardHeader title={title} />\r\n          <div className=\"taskboard-tasks\">\r\n            {filteredTasks.map(task => (\r\n              <Task\r\n                task={task}\r\n                key={task.id}\r\n                tasks={tasks}\r\n                onClick={this.toggleTask}\r\n              />\r\n            ))}\r\n\r\n            <div className=\"taskboard-tasks__input-wrapper\">\r\n              <input\r\n                className=\"taskboard-tasks__input\"\r\n                type=\"text\"\r\n                placeholder=\"Create task\"\r\n                value={name}\r\n                onChange={({ target: { value } }) =>\r\n                  this.setState({ name: value })\r\n                }\r\n                onKeyPress={e => e.key === \"Enter\" && this.createNewTask()}\r\n              />\r\n              {showCreateButton && (\r\n                <button\r\n                  onClick={this.createNewTask}\r\n                  className=\"taskboard-tasks__create-button\"\r\n                >\r\n                  Enter\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  tasks: state.tasks\r\n});\r\n\r\nconst mapDispatchToState = dispatch => ({\r\n  createTask: bindActionCreators(createTask, dispatch),\r\n  setTasks: bindActionCreators(setTasks, dispatch),\r\n  getTask: bindActionCreators(getTask, dispatch)\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToState\r\n)(TaskBoard);\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport TaskBoard from \"./containers/TaskBoard\";\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route key=\"0\" exact path=\"/\" render={props => <TaskBoard title=\"My day\" filter=\"myday\" {...props} />} />\n          <Route key=\"1\" exact path=\"/important\" render={props => <TaskBoard title=\"Important\" filter=\"important\" {...props} />} />\n          <Route key=\"2\" exact path=\"/planned\" render={props => <TaskBoard title=\"Planned\" filter=\"planned\" {...props} />} />\n          <Route key=\"3\" exact path=\"/tasks\" render={props => <TaskBoard title=\"Tasks\" filter=\"\" {...props} />} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { CREATE_TASK, SET_TASKS, GET_TASK, UPDATE_TASK } from \"../actionTypes\";\r\n\r\nconst initialState = {\r\n  tasks: []\r\n};\r\n\r\nexport const taskReducers = tasks;\r\n\r\nfunction tasks(state = initialState, action) {\r\n  switch (action.type) {\r\n    case CREATE_TASK: {\r\n      let oldTasks = state.tasks;\r\n      let newState = { ...state, tasks: [...oldTasks, action.payload] };\r\n      return newState;\r\n    }\r\n    case SET_TASKS: {\r\n      return { ...state, tasks: action.payload };\r\n    }\r\n    case GET_TASK: {\r\n      let taskId = action.payload;\r\n      let tasks = state.tasks;\r\n      let task = tasks.find(t => {\r\n        return t.id === taskId;\r\n      });\r\n      return { ...state, task: task };\r\n    }\r\n    case UPDATE_TASK: {\r\n      let taskId = action.payload.id;\r\n      let tasks = state.tasks;\r\n      let taskIndex = tasks.findIndex(t=>t.id === taskId);\r\n      let task = tasks[taskIndex]\r\n      let newTask = {\r\n        ...task,\r\n        ...action.payload\r\n      };\r\n      let filter = arr => arr.filter(task => task.id !== taskId);\r\n      let filteredTasks = filter(tasks);\r\n      filteredTasks.splice(taskIndex,0,newTask)\r\n      return { ...state, tasks: [...filteredTasks] };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { taskReducers } from \"./todoReducers\";\r\n\r\nexport const rootReducer = taskReducers \r\n","import { createStore } from \"redux\";\r\nimport { rootReducer } from \"./reducers\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport { store };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}